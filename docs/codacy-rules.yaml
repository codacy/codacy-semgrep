rules:
  - id: codacy.java.security.hard-coded-password
    severity: ERROR
    languages:
      - java
    patterns:
        - pattern-either:
          - pattern: String $PASSWORD = "$VALUE";
        - metavariable-regex:
            metavariable: "$PASSWORD"
            regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
    message: Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.
    metadata:
      owasp:
        - A3:2017 Sensitive Data Exposure
      description: Hardcoded passwords are a security risk.
      category: security
      technology:
        - java
      impact: HIGH
      confidence: MEDIUM
  - id: codacy.csharp.security.hard-coded-password
    severity: ERROR
    languages:
      - csharp
    patterns:
        - pattern-either:
          - pattern: var $PASSWORD = "$VALUE";
        - metavariable-regex:
            metavariable: "$PASSWORD"
            regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
    message: Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.
    metadata:
      owasp:
        - A3:2017 Sensitive Data Exposure
      description: Hardcoded passwords are a security risk.
      category: security
      technology:
        - .net
      impact: HIGH
      confidence: MEDIUM
  - id: codacy.javascript.security.hard-coded-password
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
        - pattern-either:
          - pattern: let $PASSWORD = "$VALUE"
          - pattern: const $PASSWORD = "$VALUE"
          - pattern: var $PASSWORD = "$VALUE"
          - pattern: let $PASSWORD = '$VALUE'
          - pattern: const $PASSWORD = '$VALUE'
          - pattern: var $PASSWORD = '$VALUE'
          - pattern: let $PASSWORD = `$VALUE`
          - pattern: const $PASSWORD = `$VALUE`
          - pattern: var $PASSWORD = `$VALUE`
        - metavariable-regex:
            metavariable: "$PASSWORD"
            regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
    message: Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.
    metadata:
      owasp:
        - A3:2017 Sensitive Data Exposure
      description: Hardcoded passwords are a security risk.
      category: security
      technology:
        - javascript
      impact: HIGH
      confidence: MEDIUM
  - id: codacy.generic.plsql.empty-strings
    severity: WARNING
    languages:
      - generic
    pattern: $VAR VARCHAR2($LENGTH) := '';
    message: Empty strings can lead to unexpected behavior and should be handled carefully.
    metadata:
      description: Detects empty strings in the code which might cause issues or bugs.
      category: security
      impact: MEDIUM
      confidence: MEDIUM
  - id: codacy.generic.plsql.find-all-passwords
    severity: ERROR
    languages:
      - generic
    pattern: |
      $PASSWORD VARCHAR2($LENGTH) := $...VALUE;
    options:
      generic_ellipsis_max_span: 0
    message: >
      Hardcoded or exposed passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.
    metadata:
      owasp:
        - A3:2017 Sensitive Data Exposure
      description: Finding all occurrences of passwords in different languages and formats, while avoiding common false positives.
      category: security
      impact: HIGH
      confidence: MEDIUM
  - id: codacy.generic.plsql.resource-injection
    severity: ERROR
    languages:
      - generic
    patterns:
      - pattern-either:
          - pattern: |
              $RESOURCE := DBMS_CUBE.BUILD($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_FILE_TRANSFER.COPY_FILE($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_FILE_TRANSFER.GET_FILE($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_FILE_TRANSFER.PUT_FILE($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_SCHEDULER.GET_FILE($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_SCHEDULER.PUT_FILE($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_SCHEDULER.CREATE_PROGRAM($...ARGS);
          - pattern: |
              $RESOURCE := DBMS_SERVICE.CREATE_SERVICE($...ARGS);
          - pattern: |
              $RESOURCE := UTL_TCP.OPEN_CONNECTION($...ARGS);
          - pattern: |
              $RESOURCE := UTL_SMTP.OPEN_CONNECTION($...ARGS);
          - pattern: |
              $RESOURCE := WPG_DOCLOAD.DOWNLOAD_FILE($...ARGS);
    options:
      generic_ellipsis_max_span: 0
    message: Resource injection detected. This can lead to unauthorized access or manipulation of resources.
    metadata:
      owasp:
        - A3:2017 Sensitive Data Exposure
      description: Detects assignments in PL/SQL involving risky DBMS functions that might cause security issues.
      category: security
      impact: HIGH
      confidence: MEDIUM
  - id: codacy.generic.sql.grant-all
    severity: ERROR
    languages:
      - generic
    pattern: |
          GRANT ALL $X
    paths:
      include:
        - '*.sql'
    message: >
      GRANT ALL privileges should not be used as it gives excessive permissions that violate the principle of least privilege.
      Instead, grant only the specific privileges that are required.
    metadata:
      owasp:
        - A5:2017 Broken Access Control
      description: Detects use of GRANT ALL which gives excessive database privileges
      category: security
      impact: HIGH
      confidence: LOW
  - id: codacy.generic.sql.grant-select-no-role
    languages:
      - generic
    severity: ERROR
    message: >
      GRANT SELECT privileges should only be given to role-based accounts
      (ending in '_role'). Direct grants to users or non-role accounts violate
      security best practices.
    pattern-regex: GRANT\s+(DELETE|INSERT|SELECT|UPDATE)(\s*,\s*(DELETE|INSERT|SELECT|UPDATE))*\s+ON\s+[a-zA-Z0-9_]+(\.[a-zA-Z0-9_*]+)?\s+TO\s+(?![a-zA-Z0-9_]*_role\b)[a-zA-Z0-9_]+
    paths:
      include:
        - "*.sql"
    metadata:
      owasp:
        - A5:2017 Broken Access Control
      description: Detects GRANT SELECT statements that are not targeting role-based
        accounts
      category: security
      impact: MEDIUM
      confidence: LOW
  - id: codacy.generic.sql.fnd-profile-in-query
    severity: ERROR
    languages:
      - generic
    patterns:
      - pattern-either:
        - pattern-regex: (?i)SELECT\s+.*\bFND_PROFILE\.[a-zA-Z0-9_]+\(
        - pattern-regex: (?i)SELECT\s+.*\bFROM\b.*\bWHERE\b.*\bFND_PROFILE\.[a-zA-Z0-9_]+\(

    paths:
      include:
        - '*.sql'
    message: >
      FND_PROFILE functions should not be used directly in SELECT or WHERE clauses.
      Instead, assign the FND_PROFILE function value to a variable first and then use that variable in the query.
      This improves performance and maintainability.
    metadata:
      description: Detects direct usage of FND_PROFILE functions in SQL queries instead of using variables
      category: performance
      impact: MEDIUM
      confidence: LOW
  - id: codacy.java.security.flexible-search-sql-injection
    languages: 
      - java
    severity: ERROR
    message: "Possible SQL Injection: Avoid concatenating user input in FlexibleSearchQuery."
    patterns:
      - pattern-either:
        - pattern: |
            new FlexibleSearchQuery("SELECT " + ...)
        - pattern: |
            new FlexibleSearchQuery("..." + $VAR + "...")
      - pattern-not: |
          new FlexibleSearchQuery("SELECT ... ?param")
    metadata:
      category: security
      technology: [sap-commerce, hybris]
      confidence: LOW
  - id: codacy.csharp.security.null-dereference
    languages:
      - csharp
    severity: ERROR
    message: >
      Potential null dereference detected. The parameter or variable could be
      null and should be validated before accessing its members. Add a null
      check before dereferencing the object to prevent NullReferenceException at
      runtime.
    patterns:
      - pattern-inside: |
          $RETURNTYPE $METHOD(...,$TYPE $NULLABLE, ...) { ... }
      - pattern-not-inside: |
          if ($NULLABLE == null) { ... }
          ...
      - pattern-either:
          - pattern: |
              $NULLABLE.$MEMBER
          - pattern: |
              $FUNCTION_NAME($NULLABLE, ...);
      - pattern-not: |
          if ($NULLABLE == null) { return ... }
          ...
    metadata:
      category: security
      technology:
        - csharp
        - dotnet
      confidence: LOW

